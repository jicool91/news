package ru.gang.newsBot.bot;

import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.gang.newsBot.model.NewsItem;
import ru.gang.newsBot.service.NewsAnalyzerService;
import ru.gang.newsBot.service.NewsPosterService;
import ru.gang.newsBot.service.RssParserService;

import java.io.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Component
public class NewsBot extends TelegramLongPollingBot {

    private final RssParserService rssParserService;
    private final NewsAnalyzerService newsAnalyzerService;
    private final NewsPosterService newsPosterService;

    @Getter
    private final Set<String> sentNews = new HashSet<>();

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    private static final String SENT_NEWS_FILE = "sent_news.txt";

    public NewsBot(DefaultBotOptions options,
                  RssParserService rssParserService,
                  NewsAnalyzerService newsAnalyzerService,
                  NewsPosterService newsPosterService) {
        super(options);
        this.rssParserService = rssParserService;
        this.newsAnalyzerService = newsAnalyzerService;
        this.newsPosterService = newsPosterService;
        System.out.println("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram API");
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("üì• –ü–æ–ª—É—á–µ–Ω update: " + update);

        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            System.out.println("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + text);

            if ("/fetch".equals(text)) {
                System.out.println("üöÄ –ö–æ–º–∞–Ω–¥–∞ /fetch –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!");
                fetchAndPostNews();
                sendTextMessage(chatId, "‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
            }
        }
    }

    private void sendTextMessage(Long chatId, String text) {
        try {
            SendMessage message = new SendMessage(chatId.toString(), text);
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void fetchAndPostNews() {
        System.out.println("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...");

        loadSentNews();

        List<NewsItem> newsList = rssParserService.fetchNewsWithCategory();
        Set<String> sentCategories = new HashSet<>();

        System.out.println("üìå –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:");
        for (NewsItem news : newsList) {
            System.out.println("üìú " + news.getTitle() + " | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + news.getCategory());
        }

        for (NewsItem news : newsList) {
            if (sentNews.contains(news.getUrl())) {
                System.out.println("‚è≠ –ü—Ä–æ–ø—É—Å–∫: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ - " + news.getTitle());
                continue;
            }

            if (sentCategories.contains(news.getCategory())) {
                System.out.println("‚è≠ –ü—Ä–æ–ø—É—Å–∫: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - " + news.getCategory());
                continue;
            }

            System.out.println("‚úç –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: " + news.getTitle());

            String channelId = rssParserService.getCategoryChannel(news.getCategory());
            if (channelId == null) {
                System.out.println("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + news.getCategory());
                continue;
            }

            System.out.println("üì§ –ì–æ—Ç–æ–≤–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª " + channelId + " –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + news.getCategory());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            String description = news.getDescription().trim();
            if (description.isEmpty()) {
                System.out.println("‚ö† –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É.");
                description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.";
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            System.out.println("üìù –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: " + description);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            String caption = "**" + news.getTitle() + "**\n\n" + description;

            // –£—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –≤ 1024 —Å–∏–º–≤–æ–ª–∞
            if (caption.length() > 950) {
                caption = caption.substring(0, 950) + "...";
            }

            caption += "\n\n[–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é](" + news.getUrl() + ")";

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            SendPhoto photoMessage = newsPosterService.buildPhotoMessage(
                    news.getTitle(),
                    news.getUrl(),
                    news.getSource(),
                    news.getImageUrl(),
                    news.getDescription(),
                    channelId // <-- –ü–µ—Ä–µ–¥–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ —Å—é–¥–∞
            );

            try {
                execute(photoMessage);
                sentNews.add(news.getUrl());
                sentCategories.add(news.getCategory());
                saveSentNews();
                System.out.println("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª: " + channelId);
            } catch (TelegramApiException e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: " + e.getMessage());
            }
        }
    }



    private void loadSentNews() {
        try (BufferedReader reader = new BufferedReader(new FileReader(SENT_NEWS_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                sentNews.add(line.trim());
            }
        } catch (IOException e) {
            System.out.println("‚ö† –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.");
        }
    }

    private void saveSentNews() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(SENT_NEWS_FILE))) {
            for (String newsUrl : sentNews) {
                writer.write(newsUrl);
                writer.newLine();
            }
        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: " + e.getMessage());
        }
    }
}
