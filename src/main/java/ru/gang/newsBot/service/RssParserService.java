package ru.gang.newsBot.service;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.stereotype.Service;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import ru.gang.newsBot.model.NewsItem;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

@Service
public class RssParserService {
    private final List<String> rssUrls = List.of(
            "https://lenta.ru/rss/news",
            "https://meduza.io/rss/all",
            "https://rssexport.rbc.ru/rbcnews/news/20/full.rss",
            "https://tass.ru/rss/v2.xml"
    );

    public List<NewsItem> fetchNewsHeadlinesWithSources() {
        List<NewsItem> newsList = new ArrayList<>();

        for (String rssUrl : rssUrls) {
            System.out.println("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º RSS: " + rssUrl);
            try {
                List<NewsItem> parsedNews = parseRss(rssUrl);
                newsList.addAll(parsedNews);
                System.out.println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + parsedNews.size() + " –Ω–æ–≤–æ—Å—Ç–µ–π —Å " + rssUrl);
            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RSS " + rssUrl + ": " + e.getMessage());
            }
        }
        return newsList;
    }

    private List<NewsItem> parseRss(String rssUrl) throws Exception {
        List<NewsItem> newsList = new ArrayList<>();
        try {
            URL url = new URL(rssUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã (5 —Å–µ–∫—É–Ω–¥)
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);
            connection.setRequestMethod("GET");

            Scanner scanner = new Scanner(connection.getInputStream());
            StringBuilder xmlContent = new StringBuilder();
            while (scanner.hasNextLine()) {
                xmlContent.append(scanner.nextLine());
            }
            scanner.close();

            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            String cleanedXml = xmlContent.toString().replaceAll("&(?!amp;|lt;|gt;|quot;|apos;)", "&amp;");

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            org.w3c.dom.Document doc = builder.parse(new InputSource(new StringReader(cleanedXml)));

            NodeList items = doc.getElementsByTagName("item");
            for (int i = 0; i < items.getLength(); i++) {
                org.w3c.dom.Node itemNode = items.item(i);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º title, link, description
                String title = getChildValue(itemNode, "title");
                String link = getChildValue(itemNode, "link");
                String description = getChildValue(itemNode, "description").trim();

                // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ ‚Äì –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–∏
                if (description.isEmpty() || description.length() < 100) {
                    String fullText = extractFullTextFromArticle(link);
                    if (!fullText.isEmpty()) {
                        description = fullText;
                    }
                }

                // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                String imageUrl = getImageFromItem(doc, i);
                if (imageUrl.isEmpty()) {
                    imageUrl = extractImageFromArticle(link);
                }

                String source = getSourceName(rssUrl);

                newsList.add(new NewsItem(title, link, source, imageUrl, description));
            }
        } catch (Exception e) {
            throw new Exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ XML –≤ " + rssUrl + ": " + e.getMessage());
        }
        return newsList;
    }

    public List<NewsItem> fetchNewsWithImages() {
        List<NewsItem> newsList = fetchNewsHeadlinesWithSources();
        newsList.removeIf(news -> news.getImageUrl() == null || news.getImageUrl().isEmpty());
        return newsList;
    }

    public String getNewsSource(String newsUrl) {
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫";
    }

    private String getSourceName(String rssUrl) {
        if (rssUrl.contains("lenta.ru")) return "Lenta.ru";
        if (rssUrl.contains("meduza.io")) return "Meduza";
        if (rssUrl.contains("rbc.ru")) return "–†–ë–ö";
        if (rssUrl.contains("tass.ru")) return "–¢–ê–°–°";
        return "–î—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫";
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ç–µ–≥–æ–≤ <media:content> –∏–ª–∏ <enclosure>
     */
    private String getImageFromItem(org.w3c.dom.Document doc, int index) {
        try {
            NodeList mediaContent = doc.getElementsByTagName("media:content");
            if (mediaContent.getLength() > index) {
                return mediaContent.item(index).getAttributes().getNamedItem("url").getTextContent();
            }
            NodeList enclosure = doc.getElementsByTagName("enclosure");
            if (enclosure.getLength() > index) {
                return enclosure.item(index).getAttributes().getNamedItem("url").getTextContent();
            }
        } catch (Exception ignored) {}
        return "";
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ç–µ–≥–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤–Ω—É—Ç—Ä–∏ <item>
     */
    private String getChildValue(org.w3c.dom.Node parentNode, String childName) {
        NodeList nodeList = ((org.w3c.dom.Element) parentNode).getElementsByTagName(childName);
        if (nodeList.getLength() > 0) {
            return nodeList.item(0).getTextContent();
        }
        return "";
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –∏—â–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, div.topic-body__content),
     * –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∞–±–∑–∞—Ü—ã (<p>) –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç.
     */
    private String extractFullTextFromArticle(String articleUrl) {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
            Document articleDoc = Jsoup.connect(articleUrl).timeout(5000).get();
            Element contentBlock = articleDoc.selectFirst("div.topic-body__content");
            if (contentBlock != null) {
                Elements paragraphs = contentBlock.select("p");
                StringBuilder fullText = new StringBuilder();
                for (Element p : paragraphs) {
                    fullText.append(p.text()).append("\n\n");
                }
                return fullText.toString().trim();
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ " + articleUrl + ": " + e.getMessage());
        }
        return "";
    }

    /**
     * –ï—Å–ª–∏ –≤ RSS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å og:image –∏–∑ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–æ—Å—Ç–∏.
     */
    private String extractImageFromArticle(String articleUrl) {
        try {
            Document articleDoc = Jsoup.connect(articleUrl).timeout(5000).get();
            Element metaOgImage = articleDoc.selectFirst("meta[property=og:image]");
            if (metaOgImage != null) {
                return metaOgImage.attr("content");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ " + articleUrl + ": " + e.getMessage());
        }
        return "";
    }
}
